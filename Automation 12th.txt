package Test;

import java.io.IOException;

import org.testng.Assert;
import org.testng.annotations.Test;

import Resource.Locators;
import Resource.Repoter;
import Resource.base;

public class TestCaseOne {

	@Test
	public void TC1_VerifyUserIsAbleToNavigateToAdminPanelByClickingOnWelcomdropdown () throws IOException, InterruptedException {
		//clicking on user btn
		
		base.ClickByXpathSelector(Locators.UserBtn);
		String name1 = "TC1_Verifying welcome dropdown";

		base.TakeScreenshot(name1);


		//clicking on Admin btn
		base.ClickByCssSelector(Locators.adminBtn);

		//ToVerify Admin library Text after clicking on Admin btn
		String text =  base.GetTextByCssSelector(Locators.adminPageHeader);

		//Asserting Page Header
		Assert.assertEquals(text.trim(), "|Admin Library","Mismatch in Title - Admin page");
		base.waitForVisibleByCssSelector(Locators.panels);

		// Taking Screenshot & Adding Logs
		String name = new Exception().getStackTrace()[0].getMethodName();
		base.TakeScreenshot(name);

	}
}

package Test;

import java.io.IOException;

import org.testng.annotations.Test;

import Resource.Locators;
import Resource.base;

public class TestCaseThree {
	
	@Test
	public void TC3_Validate_whether_the_user_can_click_and_navigate_to_Add_PowerBI_Report_to_Library_popup_after_clicking_on_Add_Report_or_New_Dashboard() throws IOException, InterruptedException {
		//verifying 'Add Reports to Library' is displayed 
		base.waitForVisibleByXpath(Locators.Addreports);
		//verifying 'Add Dashboard' is displayed 
		base.waitForVisibleByXpath(Locators.AddDashboard);
		//verfying element to " Add PowerBI Report to Library " is clickable
		base.waitforelementClickable(Locators.AddPowerBiRadioBtn);
		base.ClickByCssSelector(Locators.AddPowerBiRadioBtn);

		// Taking Screenshot & Adding Logs
		String name = new Exception().getStackTrace()[0].getMethodName();
		base.TakeScreenshot(name);
	}
}

package Test;

import java.io.IOException;

import org.testng.annotations.Test;

import Resource.Locators;
import Resource.base;

public class TestCaseFour {
	
	@Test
	public void TC4_Validate_whether_the_user_can_click_on_Next_by_clicking_on_popup_of_Add_PowerBI_Report_to_Library() throws IOException, InterruptedException {
		//clicking on next button 
		base.ClickByCssSelector(Locators.NextBtn);
		// Taking Screenshot & Adding Logs
		String name = new Exception().getStackTrace()[0].getMethodName();
		base.TakeScreenshot(name);
	}
}

package Test;

import java.io.IOException;

import org.testng.Assert;
import org.testng.annotations.Test;

import Resource.Locators;
import Resource.base;

public class TestCaseFive {
	@Test
	//Add Testcase name
	public void TC5_Verify_if_the_user_can_see_the_following_message_along_with_the_toggle_that_is_set_on_Disabled_as_default() throws IOException, InterruptedException {
		//verifying Disabled - Toggle button 
		boolean toogleBtnVisibilityStatus = base.checkElementDisplayed(Locators.AzzureAccontToggleBtn);
		if(toogleBtnVisibilityStatus) {
			Boolean ToogleBtnStatus = base.checkElementEnabled(Locators.AzzureAccontToggleBtn);
			Assert.assertFalse(ToogleBtnStatus,"Toogle button Is Displayed but not disbled");
			if (!ToogleBtnStatus) {
				//verifying Description,  Workspace/Group ID, Report/Dashboard ID - Disabled
				String ELementArr[] = {Locators.DescriptionTextBoxDisbaledstate,
						Locators.WorkspaceTextBoxDisbaledstate, 
						Locators.ReportDashboardTextBoxDisbaledstate 
				};
				
				for (int i = 0; i < ELementArr.length; i++) {
					Boolean status = base.checkElementEnabled(ELementArr[i]);
					String[] values = ELementArr[i].split("'");
					Assert.assertFalse(status,values[1]+"Textbox Is Enabled, Expected to be Disabled");
				}
			} else {
				//verifying Description,  Workspace/Group ID, Report/Dashboard ID - Disabled
				String ELementArr[] = {Locators.DescriptionTextBoxDisbaledstate,
						Locators.WorkspaceTextBoxDisbaledstate, 
						Locators.ReportDashboardTextBoxDisbaledstate 
				};
				
				for (int i = 0; i < ELementArr.length; i++) {
					Boolean status = base.checkElementEnabled(ELementArr[i]);
					String[] values = ELementArr[i].split("'");
					Assert.assertFalse(status,"Toogle Button is not Disabled And "+values[1]+" Textbox Is Enabled, Expected to be Disabled");
				}
			}
		}
		else {
			System.out.println("Toogle button Is not displayed");
		}
		// Taking Screenshot & Adding Logs
		String name = new Exception().getStackTrace()[0].getMethodName();
		base.TakeScreenshot(name);
	}
}

package Test;

import java.io.IOException;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.testng.annotations.Test;

import Resource.Locators;
import Resource.TestData;
import Resource.base;

public class TestCaseSix {
		@Test
	//Add Testcase name
	public void TC6_Verify_if_the_user_is_unable_to_edit_the_WorkspaceID_Description_and_ReportID_field_without_switching_the_toggle_from_Disabled_to_Enabled_in_Add_PowerBI_Report_to_Library_popup() throws IOException, InterruptedException {

		//Enabling Add powerBi report 
		base.ClickByCssSelector(Locators.toggleBtn);
		Thread.sleep(2000);
		// sending values to Description,  Workspace/Group ID, Report/Dashboard ID - Disabled
		
		String ELementArr[] = {
				Locators.DescriptionTextBox,
				Locators.WorkspaceTextBox,
				Locators.ReportAndDashboardTextBox
		};
		String ValueToSend[] = {
				TestData.DescriptionValue,
				TestData.WorkspaceValue,
				TestData.ReportId
		};
		for (int i = 0; i < ELementArr.length; i++) {
			base.SendKeysbyXpath(ELementArr[i],ValueToSend[i]);
		}
		//Taking Screenshot after Applied in Text boxes
		base.TakeScreenshot("Values_applied_In_Description_WorkspaceID_ReportID");

		//clicking on Add report
		base.ClickByCssSelector(Locators.AddReportButton);
		Thread.sleep(2000);
		String AssertStatus = base.GetTextByCssSelector(Locators.AssertStatus);
		
		if (AssertStatus.trim().contains("Already Onboarded")) {
			base.printLog("Assert Already Onboarded " + ":: Message From Header "+AssertStatus);
			
		} else {
			base.printLog(" Assert onboarded Successfully " + ":: Message From Header "+AssertStatus);
			System.out.println(base.driver.switchTo().defaultContent());
		}

		//Taking Screenshot of AssertStatus
		base.TakeScreenshot("TC_6 Assert Status");

		//clicking on Ok Button 
		//base.ClickByCssSelector(Locators.OkBtn);
		WebElement ok = base.driver.findElement(By.xpath(Locators.sadc));
		JavascriptExecutor js = (JavascriptExecutor)base.driver;
		js.executeScript("arguments[0].click();", ok);

		// Taking Screenshot & Adding Logs
		String name = new Exception().getStackTrace()[0].getMethodName();
		base.TakeScreenshot(name);
	}
					

		

}

package Test;

import java.io.IOException;

import org.openqa.selenium.By;
import org.testng.annotations.Test;

import Resource.Locators;
import Resource.TestData;
import Resource.base;

public class TestCaseSeven {

	
	@Test
	public void TC7Asset_name_update() throws IOException, InterruptedException
	{
		base.ClickByCssSelector(Locators.dashClick);
		Thread.sleep(3000);
		base.ClickByCssSelector(Locators.editClick);

		base.SendKeysbyXpath(Locators.inputbox, TestData.assetName);
		base.ClickByCssSelector(Locators.updBtn);
		Thread.sleep(2000);
		String AssertStatus = base.driver.findElement(By.xpath(Locators.updStatus)).getText();
		base.printLog(AssertStatus);
		base.TakeScreenshot("TC7_Assert_Name_Update");
		Thread.sleep(1000);
		base.ClickByCssSelector(Locators.OkBtn);
		base.ClickByCssSelector(Locators.editClick);
		base.ClickByCssSelector(Locators.updBtn);
		AssertStatus = base.driver.findElement(By.xpath(Locators.updStatus)).getText();
		base.printLog(AssertStatus);
		base.TakeScreenshot("TC7_Assert_Name_Update");
		base.ClickByCssSelector(Locators.OkBtn);
	}
}


package Test;

import java.io.IOException;

import org.openqa.selenium.By;
import org.testng.annotations.Test;

import Resource.Locators;
import Resource.base;

public class TestCaseEight {

	@Test
	 public void TC8_Update_Asset() throws InterruptedException, IOException
	 {
		 base.driver.findElement(By.xpath(Locators.updAsset)).click();
		 base.TakeScreenshot("TC8_Asset_Update_Popup");
		 base.driver.findElement(By.xpath(Locators.updAsset1)).click();
		 Thread.sleep(15000);
		 base.ClickByCssSelector(Locators.OkBtn);
	 }
}

package Test;

import java.io.IOException;

import org.testng.annotations.Test;

import Resource.Locators;
import Resource.Repoter;
import Resource.base;

public class TestCaseTwo {
	
	@Test
	public void TC2_Verify_if_the_user_is_able_to_see_and_click_on__Add_Reports_or_New_dashboard_button_in_the_Admin_Panel ()throws IOException, InterruptedException {
		
		//clicking on Add reports
		base.ClickByCssSelector(Locators.reportBtn);

		//verifying for popup to display
		base.waitForVisibleByCssSelector(Locators.popup);

		// Taking Screenshot & Adding Logs
		String name = new Exception().getStackTrace()[0].getMethodName();
		base.TakeScreenshot(name);
	}
}


